# -------------------------------------------------------------------
# Arquivo: backend/app/auth.py
# Descri√ß√£o: Implementa Endpoints de Autentica√ß√£o
# Autor: Eduardo Jos√©
# Data: 28.09.2025 
# √öltima modifica√ß√£o: 01.10.2025 
# -------------------------------------------------------------------

# ‚û§ Importa√ß√µes e Routers
# ‚ú¶ APIRouter     ‚ü∂ Cria Grupo de Rotas de API
# ‚ú¶ HTTPException ‚ü∂ Retorno de Erros HTTP
from fastapi import APIRouter, HTTPException 

# ‚û§ Importa√ß√µes de Inst√¢ncias de Cliente
# ‚ú¶ Supabase ‚ü∂ Opera√ß√µes como Selecionar, Inserir, Atualizar, Deletar
from backend.app.supabase_client import  supabase

# -------------------------------------------------------------------

# ‚û§ Defini√ß√£o do Router
# ‚ü∂ Define Grupo de Rotas para Autentica√ß√£o
router = APIRouter()

# -------------------------------------------------------------------

# ‚û§ Endpoint REGISTRO de Usu√°rio (Rota POST)

@router.post("/auth/register")

# ‚ú¶ Fun√ß√£o register_user ‚ü∂ Dicion√°rio com Chaves (email, senha, etc.)
# ‚ú¶ Payload ‚ü∂ Formato JSON com Dados do Usu√°rio de Registro

def register_user(payload: dict):               # Registro de Usu√°rio:
    email = payload.get("email")                # Email do Usu√°rio (text)
    senha = payload.get("senha")                # Senha do Usu√°rio (text)
    nome  = payload.get("nome")                 # Nome do Usu√°rio (text)
    role  = payload.get("role",                 # Role/Tipo de Usu√°rio (text)
                        "participante")         # ‚§∑ Valor Padr√£o Participante

# ‚ö†Ô∏é ‚ü∂ Se Email ou Senha for Vazio (400 Bad Request)
    if not email or not senha:
        raise HTTPException(status_code=400, detail="„Äé‚ö†Ô∏è„Äè ‚Äî Email e Senha s√£o OBRIGAT√ìRIOS!")

# ‚ö†Ô∏é ‚ü∂ Verifica se o Email j√° Existe
    existing = supabase.table("usuarios").select("id").eq("email", email).execute().data
    if existing:
        raise HTTPException(status_code=400, detail="„Äé‚ö†Ô∏è„Äè ‚Äî Email J√Å Cadastrado!")

# ‚òÖ ‚ü∂ Insere Novo Usu√°rio no Banco de Dados
    supabase.table("usuarios").insert({
        "email": email,  # E-Mail √önico
        "senha": senha,  # Recomendado: Hash de Senha 
        "nome": nome,    # Nome Completo do Usu√°rio
        "role": role     # Participante ou Organizador  
    }).execute()

# ‚ü∂ Retorno de Mensagem em JSON
    return {"message": "„Äéüë§„Äè ‚Äî Usu√°rio cadastrado com sucesso"}

# -------------------------------------------------------------------

# ‚û§ Endpoint LOGIN de Usu√°rio (Rota POST)

@router.post("/auth/login")

# ‚ú¶ Fun√ß√£o register_user ‚ü∂ Dicion√°rio com Chaves (email, senha, etc.)
# ‚ú¶ Payload ‚ü∂ Formato JSON com Dados do Usu√°rio de Registro

def login_user(payload: dict):             # Login de Usu√°rio
    email = payload.get("email")           # Email do Usu√°rio (text)
    senha = payload.get("senha")           # Senha do Usu√°rio (text)

# ‚ö†Ô∏é ‚ü∂ Se E-Mail ou Senha for Vazio (400 Bad Request)
    if not email or not senha:
        raise HTTPException(status_code=400, detail="„Äé‚ö†Ô∏è„Äè ‚Äî Email e senha s√£o obrigat√≥rios")

# ‚òÖ ‚ü∂ Busca Usu√°rio com Email e Senha
    result = supabase.table("usuarios").select("*").eq("email", email).eq("senha", senha).execute().data

# ‚ö†Ô∏é ‚ü∂ Se a Busca for Incorreta:
    if not result:
        raise HTTPException(status_code=401, detail="„Äé‚ö†Ô∏è„Äè ‚Äî Credenciais inv√°lidas")

    user = result[0]

# ‚òÖ ‚ü∂
    return {
        "message": "„Äéüë§„Äè ‚Äî Login realizado com sucesso",
        "usuario": {
            "id": user["id"],
            "nome": user["nome"],
            "email": user["email"],
            "role": user["role"]
        }
    }
